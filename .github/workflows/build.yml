name: "Build and push"

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  INFRA_REPO: https://github.com/feelingover/sphene-infra.git

on:
  push:
    branches: ['main']

jobs:
  build:
    name: "Build and push"
    runs-on: ubuntu-latest

    permissions:
        contents: read
        packages: write
        attestations: write
        id-token: write
        models: read

    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=build-${{ github.run_number }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          platforms: linux/arm64,linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Extract image tag
        id: extract-tag
        run: |
          echo "IMAGE_TAG=build-${{ github.run_number }}" >> $GITHUB_OUTPUT
          
      - name: Get last commit message
        id: last-commit
        run: |
          echo "message<<EOF" >> $GITHUB_OUTPUT
          git log -1 --pretty=%B >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 🤖 AI generated PR title
      - name: Generate PR title with AI
        id: ai-title
        run: |
          COMMIT_MSG="${{ steps.last-commit.outputs.message }}"
          IMAGE_TAG="${{ steps.extract-tag.outputs.IMAGE_TAG }}"
          
          echo "🤖 AIにPRタイトルを考えてもらっています..."
          
          TITLE_RESPONSE=$(curl -s "https://models.github.ai/inference/chat/completions" \
             -H "Content-Type: application/json" \
             -H "Authorization: Bearer $GITHUB_TOKEN" \
             -d '{
              "messages": [
                  {
                     "role": "user",
                     "content": "GitOpsのデプロイPRタイトルを作って。コミットメッセージ: '"$COMMIT_MSG"'、イメージタグ: '"$IMAGE_TAG"'。はてなブックマークでバズりそうな面白いタイトルを1行で。絵文字も使って！"
                  }
               ],
               "model": "openai/gpt-4.1"
            }' || echo '{"choices":[{"message":{"content":"🚀新イメージのデプロイリクエスト '"$IMAGE_TAG"'"}}]}')

          # JSONレスポンスからタイトルを抽出
          AI_TITLE=$(echo "$TITLE_RESPONSE" | jq -r '.choices[0].message.content // "🚀新イメージのデプロイリクエスト '"$IMAGE_TAG"'"' | head -1)
          
          echo "Generated title: $AI_TITLE"
          echo "title<<EOF" >> $GITHUB_OUTPUT
          echo "$AI_TITLE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 🤖 AI generated PR body
      - name: Generate PR body with AI
        id: ai-body
        run: |
          COMMIT_MSG="${{ steps.last-commit.outputs.message }}"
          IMAGE_TAG="${{ steps.extract-tag.outputs.IMAGE_TAG }}"
          BUILD_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          echo "🤖 AIにPR説明文を考えてもらっています..."
          
          BODY_RESPONSE=$(curl -s "https://models.github.ai/inference/chat/completions" \
             -H "Content-Type: application/json" \
             -H "Authorization: Bearer $GITHUB_TOKEN" \
             -d '{
              "messages": [
                  {
                     "role": "user",
                     "content": "GitOpsのデプロイPRの説明文をマークダウンで作って。楽しい感じで！\n\nコミット内容: '"$COMMIT_MSG"'\nイメージタグ: '"$IMAGE_TAG"'\nビルドURL: '"$BUILD_URL"'\n\n以下の情報を含めてね:\n- 🏷️ イメージタグ\n- 📝 変更内容\n- 🔨 ビルドリンク\n- マージボタンを押してもらうお願い\n\n毎回違うテンションで書いて！"
                  }
               ],
               "model": "openai/gpt-4.1"
            }' || echo '{"choices":[{"message":{"content":"### ＼ﾜｧｰｲヽ(♡´∀`)ﾉ♡／ 新しいイメージがきたよ！\n\n🚀 マージしたら本番環境にデプロイされちゃうからね！\n\n#### 📝 更新内容\n- '"$COMMIT_MSG"'\n- 🏷️ イメージタグ: `'"$IMAGE_TAG"'`\n- 🔨 ビルド: '"$BUILD_URL"'\n\n問題なさそうだったらマージボタン押しちゃって〜！"}}]}')

          # JSONレスポンスから本文を抽出
          AI_BODY=$(echo "$BODY_RESPONSE" | jq -r '.choices[0].message.content // "### 新しいイメージがきたよ！\n\n🚀 マージしたら本番環境にデプロイされます！\n\n#### 📝 更新内容\n- '"$COMMIT_MSG"'\n- 🏷️ イメージタグ: `'"$IMAGE_TAG"'`\n- 🔨 ビルド: '"$BUILD_URL"'"')
          
          echo "Generated body:"
          echo "$AI_BODY"
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$AI_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Checkout infrastructure repository
        uses: actions/checkout@v4
        with:
          repository: feelingover/sphene-infra
          path: infra
          token: ${{ secrets.PAT_TOKEN }}
          
      - name: Update deployment.yaml with new image tag
        run: |
          cd infra
          IMAGE_TAG=${{ steps.extract-tag.outputs.IMAGE_TAG }}
          DEPLOYMENT_FILE="environments/prod/deployment.yaml"
          
          # Replace the image tag in deployment.yaml
          sed -i -e "s|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}|g" $DEPLOYMENT_FILE
          

      - name: Create Pull Request with AI-generated content
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT_TOKEN }}
          path: infra
          commit-message: Update image to ${{ steps.extract-tag.outputs.IMAGE_TAG }}
          branch: update-image-${{ steps.extract-tag.outputs.IMAGE_TAG }}
          title: ${{ steps.ai-title.outputs.title }}
          body: ${{ steps.ai-body.outputs.body }}
